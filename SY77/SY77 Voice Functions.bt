//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: Yamaha SY77 Functions.bt
//   Authors: Derek Cook
//   Version: 0.1
//   Purpose: Documents the Yamaha SY77/TG77 JNN/TNN functions
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#ifndef SY77_VOICE_FUNCTIONS_BT
#define SY77_VOICE_FUNCTIONS_BT

  // Defines
  
  #define SY77_SMALL_VOICE_BLOCK_SIZE      720
  
  #define SY77_LARGE_VOICE_BLOCK_SIZE     1376
  
  #define SY77_NORMAL_VOICE_COMMON_LENGTH 	  66
    #define SY77_ELEMENT_HEADER_LENGTH 		     9
    #define SY77_AFM_ELEMENT_LENGTH 					 313 
    #define SY77_AWM_ELEMENT_LENGTH 					  99
    #define SY77_DRUM_VOICE_COMMON_LENGTH 		  66
    #define SY77_DRUM_ELEMENT_LENGTH 				   7	
  
  
  //
  // A function to calculate the length of a voice
  //
  
  int CalculateVoiceFileMessageLength(SY77_VOICE_TYPE voiceType) {
    
    local int length = 0;
    
    switch (voiceType) {				  		  case SY_VOICE_TYPE_1_AFM_MONO:		  case SY_VOICE_TYPE_1_AFM_POLY:			  length += SY77_NORMAL_VOICE_COMMON_LENGTH;			  length += SY77_AFM_ELEMENT_LENGTH;			  break;		  		  case SY_VOICE_TYPE_2_AFM_MONO:		  case SY_VOICE_TYPE_2_AFM_POLY:			  length += SY77_NORMAL_VOICE_COMMON_LENGTH;			  length += SY77_AFM_ELEMENT_LENGTH * 2;			  break;		  		  case SY_VOICE_TYPE_4_AFM_MONO:			  length += SY77_NORMAL_VOICE_COMMON_LENGTH;			  length += SY77_AFM_ELEMENT_LENGTH * 4;			  break;		  		  case SY_VOICE_TYPE_1_AWM_POLY:			  length += SY77_NORMAL_VOICE_COMMON_LENGTH;			  length += SY77_AWM_ELEMENT_LENGTH;			  break;		  		  case SY_VOICE_TYPE_2_AWM_POLY:			  length += SY77_NORMAL_VOICE_COMMON_LENGTH;			  length += SY77_AWM_ELEMENT_LENGTH * 2;			  break;		  		  case SY_VOICE_TYPE_4_AWM_POLY:			  length += SY77_NORMAL_VOICE_COMMON_LENGTH;			  length += SY77_AWM_ELEMENT_LENGTH * 4;			  break;		  		  case SY_VOICE_TYPE_1_AFM_1_AWM_POLY:			  length += SY77_NORMAL_VOICE_COMMON_LENGTH;			  length += SY77_AFM_ELEMENT_LENGTH;			  length += SY77_AWM_ELEMENT_LENGTH;			  break;		  		  case SY_VOICE_TYPE_2_AFM_2_AWM_POLY:			  length += SY77_NORMAL_VOICE_COMMON_LENGTH;			  length += SY77_AFM_ELEMENT_LENGTH * 2;			  length += SY77_AWM_ELEMENT_LENGTH * 2;			  break;		  		  case SY_VOICE_TYPE_DRUM:			  length += SY77_DRUM_VOICE_COMMON_LENGTH;			  length += SY77_DRUM_ELEMENT_LENGTH * SY77_AWM_DRUM_VOICE_NUMBER_OF_ELEMENTS;			  break;		  	  }
    
    return length;			  
  }
  
  //
  // A function to calculate the pad bytes required for a voice within the small vocie data block
  //
  
  int CalculateSmallVoicePadBytes(SY77_VOICE_TYPE voiceType) {
    
    if ( voiceType != SY_VOICE_TYPE_DRUM ) {
      
      return SY77_SMALL_VOICE_BLOCK_SIZE - (SY77_ELEMENT_HEADER_LENGTH * 2) - CalculateVoiceFileMessageLength(voiceType);
    
    } else {
      
      return SY77_SMALL_VOICE_BLOCK_SIZE - CalculateVoiceFileMessageLength(voiceType);
    
    }
    
  }
    
  //
  // A function to calculate the pad bytes required for a voice within the small vocie data block
  //
  
  int CalculateLargeVoicePadBytes(SY77_VOICE_TYPE voiceType) {
    
    switch ( voiceType ) {

		  case SY_VOICE_TYPE_1_AFM_MONO:		  case SY_VOICE_TYPE_1_AFM_POLY:		  case SY_VOICE_TYPE_2_AFM_MONO:		  case SY_VOICE_TYPE_2_AFM_POLY:		  case SY_VOICE_TYPE_1_AWM_POLY:		  case SY_VOICE_TYPE_2_AWM_POLY:		  case SY_VOICE_TYPE_1_AFM_1_AWM_POLY:        return SY77_LARGE_VOICE_BLOCK_SIZE - (SY77_ELEMENT_HEADER_LENGTH * 2) - CalculateVoiceFileMessageLength(voiceType);
		  		  case SY_VOICE_TYPE_4_AFM_MONO:		  case SY_VOICE_TYPE_4_AWM_POLY:		  case SY_VOICE_TYPE_2_AFM_2_AWM_POLY:        return SY77_LARGE_VOICE_BLOCK_SIZE - (SY77_ELEMENT_HEADER_LENGTH * 4) - CalculateVoiceFileMessageLength(voiceType);

      case SY_VOICE_TYPE_DRUM:
        return SY77_LARGE_VOICE_BLOCK_SIZE - CalculateVoiceFileMessageLength(voiceType);

      default:
        return -1;

    }    
    
  }

#endif
