//-------------------------------------------------------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
// File:      EX5 S1M File
// Author:    Derek Cook
// Revision:  V1
// Purpose:   Decoding of the Yamaha EX5 S1M File Format which contains waves, wave layers
//            sample headers and sample data
//
// Notes:     Read this template from the bottom up! Structures need to be defined before use
//
//-------------------------------------------------------------------------------------------------

#ifndef S1M_FILE

  #define S1M_FILE

  //
  // Includes
  //
  
  #include "EX5 S1M Wave.bt"
  #include "EX5 S1M Sample.bt"
  
  #ifndef S1A_FILE
  
    #include "EX5 S1M Functions.bt"
  
  #endif
  
  //
  // defines
  //
  
  #define S1M_HEADER_FILE_ID_LENGTH          16
  #define S1M_HEADER_RESERVED_LENGTH        111
  
  // 
  // The S1M file header
  //
  
  struct S1M_HEADER {
  
      char   FileID[S1M_HEADER_FILE_ID_LENGTH];     // The file ID for S1M files
      ubyte  reserved[S1M_HEADER_RESERVED_LENGTH];  // reserved block of zero bytes
      ubyte  memoryConfiguration;                   // Amount of DRAM memory in words required over and above 0.5 MW installed
                                                    //   00h: none  
                                                    //   04h: DRAM 4M  
                                                    //   08h: DRAM 8M 
                                                    //   10h DRAM 16M 
                                                    //   20h DRAM 32M
                                                    // Flash Size required. Bits are zero if S1M will not fit in FLASH
                                                    // If 8M is required both 4M and 8M flags must be set
                                                    //   40h: FLASH 4M  
                                                    //   80h: FLASH 8M
                                               
    // AThe address of the null wave (address offset from top of wave data)
    // Efeectively, this is the size of the activeWaveBlock
    DWORD       nullWaveAddress;     
    
    // the total number of layers used in all active waves (1024 max)
    WORD        numberOfLayers;                         
    
  };
  
  
  // 
  // Wave data
  // 
  
  struct S1M_WAVES {
    
    // The waveform pointer offsets in the waveform block. 0xffff = no waveform.
    // These are indexes into the activeWaveBlock to access the start of the wave
    // Note that active waves may not be contigious
    DWORD       waveformPointers[S1M_NUMBER_OF_WAVES];  
    
    // The waves which are active
    S1M_WAVE    activeWaveBlock[CalculateNumberofWaves()] <optimize=false>;
    
    // You need to pad out the unused wave block to get to the samples, as the total wave block is a fixed size
    // Note although this block may appear to contain data, it may be old wave data that has been deleted
    ubyte       inactiveWaveBlock[CalculateUnusedWaveBlockSize()];           
    
  };
  
  //
  // Sample data
  //
  
  struct S1M_SAMPLES {
    
    // Sample Headers
    S1M_SAMPLE_HEADER sampleHeaders[S1M_NUMBER_OF_SAMPLES];
    
    // Now the sizes of the samples. 
    DWORD sampleSizes[S1M_NUMBER_OF_SAMPLES];
    
    // Now the sample data blocks. This shows the power of 010 Editor Templates to 
    // dynamically create structures based on parsing the file!
    
    // Local variables for calculation (these do not appear in the Template Results)
    local int i = 0;
    local int totalNumberOfSamples;
    local int totalSampleSize = 0;
    
    for ( i = 0; i < S1M_NUMBER_OF_SAMPLES; i += 1 ) {
    
      // Only add a sample block to the templateif the sample size is non zero
      if ( sampleSizes[i] > 0 ) {
      
        S1M_SAMPLE_BLOCK sampleBlock(sampleSizes[i]);
        
        totalNumberOfSamples += 1;
        totalSampleSize      += sampleSizes[i]; 
        
      }
      
    } 
  
  };
  
  //
  // The end of file pad to pad the file up to the next 128 byte boundary
  //
  
  #define S1M_PAD_BLOCK ubyte

  //////////////////////////////////////////////////////////////////////////
  // Start of the S1M template
  // Data is big endian, but bit fields are right to left
  
  BigEndian();
  BitfieldRightToLeft();
  
  S1M_HEADER    header;  
  S1M_WAVES     waves; 
  S1M_SAMPLES   samples;                              
  S1M_PAD_BLOCK padBlock[CalculatePadBlockSize()];
  
  //
  // End of S1M File
  //
  
  //
  // Some information to display when running the template
  //
  
  DisplayFileInformation();

#endif