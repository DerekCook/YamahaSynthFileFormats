//-------------------------------------------------------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
// File:      EX5 Sequence Common
// Author:    Derek Cook
// Revision:  V1
// Purpose:   Decoding of the Yamaha EX5 S1P File Format which contains EX5 Patterns
//
// Notes:     Read this template from the bottom up! Structures need to be defined before use
//
//-------------------------------------------------------------------------------------------------

#ifndef S1P_FILE

  #define S1P_FILE

  //
  // Decimal constant definitions
  //
  
  #define S1P_HEADER_FILE_ID_LENGTH          16
  #define S1P_HEADER_RESERVED_LENGTH         16
  #define S1P_NUMBER_OF_PATTERNS             50
  #define S1P_PATTERN_NUMBER_OF_TRACKS        8
  #define S1P_PATTERN_COMMON_SIZE           512
  #define S1P_PATTERN_NAME_LENGTH             8
  #define S1P_PATTERN_COMMON_BLOCK_PAD_SIZE 100
  
  //
  // The following defines need to adapt depending on whether or not this S1P data is 
  // within an S1P or S1A file
  //
  
  #ifndef S1A_FILE
  
    #define S1P_PAD_BLOCK_SIZE 92
  
  #else 
  
    #define S1P_PAD_BLOCK_SIZE 58
  
  #endif
  //
  // Includes
  //
  
  #include "EX5 S1X Sequence Common.bt"
  
  //
  // local variables (which do not appear in the template results
  //
  
  local int patternIndex;
  local int patternTrackIndex;
  
  // 
  // The S1P file header
  //
  
  struct S1P_HEADER {
  
    char  FileID[S1P_HEADER_FILE_ID_LENGTH];     // The file ID for S1M files
    ubyte reserved[S1P_HEADER_RESERVED_LENGTH];  // reserved block of zero bytes
                                               
  };
  
  //
  // The S1P Pattern Header which gives the length of the tracks and the common block size for each pattern
  //
  // If the common block size is zero, the track lengths will also be zero
  //
  // zero length data is not written in the file, so this header info is crucial in parsing the rest of the file
  //
  
  struct S1P_PATTERN_HEADER {
    
    ushort trackLengths[S1P_PATTERN_NUMBER_OF_TRACKS];
  
    ushort commonBlockLength;
    
  };
  
  // 
  // The pattern track block
  //
  
  struct S1P_PATTERN_TRACK_BLOCK {
  
    byte  measures;    byte  beats;    short clock;
    
  };
  
  //
  // The pattern common block
  //
  
  struct S1P_PATTERN_COMMON_BLOCK {
  
    char patternName[S1P_PATTERN_NAME_LENGTH];
    
    short tempo;    byte  unknown1;    ubyte trackMute;    byte  unknown2;    byte  maximumLength;    ubyte playEffectsThrough;    byte  unknown3;
    
    S1P_PATTERN_TRACK_BLOCK trackData[S1P_PATTERN_NUMBER_OF_TRACKS];
    S1X_PLAY_EFFECTS playEffects[S1P_PATTERN_NUMBER_OF_TRACKS];
  
    byte transmitChannels[S1P_PATTERN_NUMBER_OF_TRACKS];
    
    S1X_GROOVE_TEMPLATE grooveTemplate;
    
    ushort unknown5[S1P_PATTERN_NUMBER_OF_TRACKS];
    
    ubyte pad[S1P_PATTERN_COMMON_BLOCK_PAD_SIZE];
    
  };
  
  //
  // The pattern structure in the file.
  //
  // Tracks with no length in the apreggio header structure are not present in the data
  //
  // If the pattern is present in the file, there will always be a common block
  //
  // Note that tracks with data in are not necessarilly contigious, you need to go off the 
  
  struct S1P_PATTERN {
  
    // Iterate through the track header
    for ( patternTrackIndex = 0; patternTrackIndex < S1P_PATTERN_NUMBER_OF_TRACKS; patternTrackIndex += 1 ) {
    
      // Is the track length non zero
      if ( patternHeaders[patternIndex].trackLengths[patternTrackIndex] != 0 ) {
      
        // Yes, create a track. 
        S1X_TRACK track(patternHeaders[patternIndex].trackLengths[patternTrackIndex]);
        
      }
      
    }
    
    S1P_PATTERN_COMMON_BLOCK commonBlock;
        
  };
  
  //////////////////////////////////////////////////////////////////////////
  // Start of the S1P template 
  // Data is big endian, but bit fields are right to left
  
  BigEndian();
  BitfieldRightToLeft();
  
  // If this block is within an S1A file then there is no S1R file header
  #ifndef S1A_FILE
  
    // The header data
    S1P_HEADER  header;    
  
  #endif
  
  // The pattern header blocks
  S1P_PATTERN_HEADER patternHeaders[S1P_NUMBER_OF_PATTERNS];
  
  // If this block is within an S1A file then there is an alignment value for the end of block pad
  #ifdef S1A_FILE
  
    ushort s1pEndBlockSize;
  
  #endif
  
  // The pad bytes before the start of the pattern data
  ubyte padBytes[S1P_PAD_BLOCK_SIZE];
  
  // There can be up to 50 patternss, but they are only defined if
  // The common block size in the header is non zero
  
  for ( patternIndex = 0; patternIndex < S1P_NUMBER_OF_PATTERNS; patternIndex += 1 ) {
  
    if ( patternHeaders[patternIndex].commonBlockLength != 0 ) {
      
      S1P_PATTERN pattern;
    
    }
    
  }
  
  // If this block is within an S1A file then we need to add the end of block pad
  #ifdef S1A_FILE
  
    uchar s1pEndBlockPad[s1pEndBlockSize];
  
  #endif

  //
  // End of S1P File
  //

#endif
